jobs:

- job: Tests

  pool:
    vmImage: 'Ubuntu 16.04' # 'VS2017-Win2016'

  variables: 
     solution: '**/*.sln' 
     buildPlatform: 'Any CPU' 
     buildConfiguration: 'Release' 
     buildBetaId: 'beta-$(Build.BuildId)'

  steps:
 
  - script: |
      echo '$(buildBetaId)'
      dotnet --version
    displayName: Get dotnet version

  # Seems the 3306 is already in use on the machine used by Azure Devops, so redirect to 3307
  - script: docker run --name mysql -e MYSQL_ROOT_PASSWORD=Password12! -p 3307:3306 -d mysql
    displayName: 'Run MySql on Linux container'
    
  - script: echo "##vso[task.setvariable variable=mySQLIP;isOutput=true]$(docker inspect -f "{{ .NetworkSettings.IPAddress }}" mysql)"
    name: setvarStep
    displayName: '[obsolete] Get Ip from MySql container'

  - script: docker run --name sqlserver -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=Password12!' -p 1433:1433  -d microsoft/mssql-server-linux:2017-latest
    displayName: 'Run SQL 2017 on Linux container'

  #- script: |
  #    sqlcmd -S localhost -U sa -P 'Password12!' -Q 'select @@VERSION'
  #    exit
  #  continueOnError: 'true'
  #  displayName: 'Run SQLCMD, Continue if any error'


  # Dont need anymore to pass the MySQL Ip Address, just let it here for memory
  # --logger trx;logfilename=TEST.xml : Unexplained arg to publish tests resuls

  - script: dotnet test Tests/Dotmim.Sync.Tests/Dotmim.Sync.Tests.csproj --logger trx
    name: dotnettests
    displayName: 'Tests'
    env: 
      'MYSQLIP' : $(setvarStep.mySQLIP)
      'AZUREDEV' : 'true'

  - task: PublishTestResults@2
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'

- job: Beta

  # dependsOn: Tests
  # condition: succeeded('Tests')

  # Pool on a VS 2017 image to be able to compile for .Net 4.6
  pool:
    vmImage: 'VS2017-Win2016'

  variables: 
     buildConfiguration: 'Release' 
     buildBetaId: 'beta-$(Build.BuildId)'

  steps:

  - script: | 
     dotnet build Projects/Dotmim.Sync.Core/Dotmim.Sync.Core.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.Core --version-suffix $(buildBetaId)
     dotnet build Projects/Dotmim.Sync.SqlServer/Dotmim.Sync.SqlServer.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.SqlServer --version-suffix $(buildBetaId)
     dotnet build Projects/Dotmim.Sync.Sqlite/Dotmim.Sync.Sqlite.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.Sqlite --version-suffix $(buildBetaId)
     dotnet build Projects/Dotmim.Sync.MySql/Dotmim.Sync.MySql.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.MySql --version-suffix $(buildBetaId)
     dotnet build Projects/Dotmim.Sync.Web.Client/Dotmim.Sync.Web.Client.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.Web.Client --version-suffix $(buildBetaId)
     dotnet build Projects/Dotmim.Sync.Web.Server/Dotmim.Sync.Web.Server.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/Dotmim.Sync.Web.Server --version-suffix $(buildBetaId)
     dotnet build Projects/dotnet-sync/dotnet-sync.csproj -c $(buildConfiguration) -o $(Build.ArtifactStagingDirectory)/dotnet-sync --version-suffix $(buildBetaId)
    displayName: 'Compile binaries and get beta nuget packages'      

  # Publish Build Artifacts
  - task: PublishBuildArtifacts@1

